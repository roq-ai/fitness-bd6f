generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model booking {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id  String   @db.Uuid
  trainer_id   String   @db.Uuid
  gym_id       String   @db.Uuid
  booking_date DateTime @db.Date
  booking_time DateTime @db.Time(6)
  workout_type String   @db.VarChar(255)
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  customer     customer @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  gym          gym      @relation(fields: [gym_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  trainer      trainer  @relation(fields: [trainer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model customer {
  id                     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                String    @db.Uuid
  gym_id                 String    @db.Uuid
  membership_start_date  DateTime  @db.Date
  membership_end_date    DateTime? @db.Date
  preferred_workout_time DateTime? @db.Time(6)
  preferred_trainer_id   String    @db.Uuid
  created_at             DateTime  @default(now()) @db.Timestamp(6)
  updated_at             DateTime  @default(now()) @db.Timestamp(6)
  booking                booking[]
  gym                    gym       @relation(fields: [gym_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  trainer                trainer   @relation(fields: [preferred_trainer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user                   user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model gym {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?       @db.VarChar(255)
  address     String?       @db.VarChar(255)
  city        String?       @db.VarChar(255)
  state       String?       @db.VarChar(255)
  zip_code    String?       @db.VarChar(10)
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  user_id     String        @db.Uuid
  tenant_id   String        @db.VarChar(255)
  booking     booking[]
  customer    customer[]
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  team_member team_member[]
  trainer     trainer[]
}

model team_member {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  gym_id     String    @db.Uuid
  position   String    @db.VarChar(255)
  start_date DateTime  @db.Date
  end_date   DateTime? @db.Date
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  gym        gym       @relation(fields: [gym_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model trainer {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String     @db.Uuid
  gym_id           String     @db.Uuid
  specialty        String     @db.VarChar(255)
  years_experience Int
  certification    String     @db.VarChar(255)
  created_at       DateTime   @default(now()) @db.Timestamp(6)
  updated_at       DateTime   @default(now()) @db.Timestamp(6)
  booking          booking[]
  customer         customer[]
  gym              gym        @relation(fields: [gym_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             user       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String        @unique @db.VarChar(255)
  firstName   String?       @db.VarChar(255)
  lastName    String?       @db.VarChar(255)
  roq_user_id String        @db.VarChar(255)
  tenant_id   String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  customer    customer[]
  gym         gym[]
  team_member team_member[]
  trainer     trainer[]
}
